# While the Docker images themselves are supported for production usage,
# this docker-compose.yaml is designed to be used by developers to run
# an environment locally. It is not designed to be used in production.
# We recommend to use Kubernetes in production with our Helm Charts:
# https://docs.camunda.io/docs/self-managed/platform-deployment/kubernetes-helm/
# For local development, we recommend using KIND instead of `docker-compose`:
# https://docs.camunda.io/docs/self-managed/platform-deployment/kubernetes-helm/#installing-the-camunda-helm-chart-locally-using-kind

# This is a full configuration with Zeebe, Operate, Tasklist, Optimize, Identity, Keycloak, and Elasticsearch
# See docker-compose-core.yml for a lightweight configuration that does not include Optimize, Identity, and Keycloak.

services:

  postgres: # https://hub.docker.com/_/postgres
      container_name: postgres
      image: postgres:${POSTGRES_VERSION:-14.5-alpine}
      environment:
        POSTGRES_ADDITIONAL_DATABASES: bitnami_keycloak,modeler-db
        POSTGRES_USER: root
        POSTGRES_DB: postgres
        POSTGRES_PASSWORD: admin
        POSTGRES_BITNAMI_KEYCLOAK_USER: "bn_keycloak"
        POSTGRES_BITNAMI_KEYCLOAK_PASSWORD: "#3]O?4RGj)DE7Z!9SA5"
        POSTGRES_MODELER-DB_USER: "modeler-db-user"
        POSTGRES_MODELER-DB_PASSWORD: "modeler-db-password"
      restart: on-failure
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
        interval: 10s
        timeout: 5s
        retries: 5
      volumes:
        - postgres:/var/lib/postgresql/data
        - ./webModelerInitDb:/docker-entrypoint-initdb.d
      networks:
        - identity-network
        - modeler

  adminer:
    image: adminer
    #restart: always
    ports:
      - 8088:8080
    networks:
      - identity-network
      - modeler
      
volumes:
  postgres:

networks:
  identity-network:
  modeler:
